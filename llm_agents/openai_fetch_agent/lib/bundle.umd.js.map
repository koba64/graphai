{"version":3,"file":"bundle.umd.js","sources":["../../llm_utils/lib/index.js","../src/openai_fetch_agent.ts"],"sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.getMessages = exports.getMergeValue = exports.flatString = void 0;\nconst flatString = (input) => {\n    return Array.isArray(input) ? input.filter((a) => a).join(\"\\n\") : (input ?? \"\");\n};\nexports.flatString = flatString;\nconst getMergeValue = (namedInputs, params, key, values) => {\n    const inputValue = namedInputs[key];\n    const paramsValue = params[key];\n    return inputValue || paramsValue ? [(0, exports.flatString)(inputValue), (0, exports.flatString)(paramsValue)].filter((a) => a).join(\"\\n\") : (0, exports.flatString)(values);\n};\nexports.getMergeValue = getMergeValue;\nconst getMessages = (systemPrompt, messages) => {\n    const messagesCopy = [...(systemPrompt ? [{ role: \"system\", content: systemPrompt }] : []), ...(messages ?? [])];\n    return messagesCopy;\n};\nexports.getMessages = getMessages;\n","import OpenAI from \"openai\";\nimport { AgentFunction, AgentFunctionInfo, sleep } from \"graphai\";\nimport { GraphAILLMInputBase, getMergeValue, getMessages } from \"@graphai/llm_utils\";\n\ntype OpenAIInputs = {\n  model?: string;\n  images?: string[];\n  tools?: OpenAI.ChatCompletionTool[];\n  tool_choice?: OpenAI.ChatCompletionToolChoiceOption;\n  max_tokens?: number;\n  verbose?: boolean;\n  temperature?: number;\n  messages?: Array<OpenAI.ChatCompletionMessageParam>;\n  response_format?: any;\n} & GraphAILLMInputBase;\n\ntype OpenAIConfig = {\n  baseURL?: string;\n  apiKey?: string;\n  stream?: boolean;\n};\n\ntype OpenAIParams = OpenAIInputs & OpenAIConfig;\n\nconst convertOpenAIChatCompletion = (response: OpenAI.ChatCompletion, messages: OpenAI.ChatCompletionMessageParam[]) => {\n  const message = response?.choices[0] && response?.choices[0].message ? response?.choices[0].message : null;\n  const text = message && message.content ? message.content : null;\n\n  const functionResponse = message?.tool_calls && message?.tool_calls[0] ? message?.tool_calls[0] : null;\n  // const functionId = message?.tool_calls && message?.tool_calls[0] ? message?.tool_calls[0]?.id : null;\n\n  const tool = functionResponse\n    ? {\n        id: functionResponse.id,\n        name: functionResponse?.function?.name,\n        arguments: (() => {\n          try {\n            return JSON.parse(functionResponse?.function?.arguments);\n          } catch (__e) {\n            return undefined;\n          }\n        })(),\n      }\n    : undefined;\n\n  if (message) {\n    messages.push(message);\n  }\n  return {\n    ...response,\n    text,\n    tool,\n    message,\n    messages,\n  };\n};\n\nexport const openAIFetchAgent: AgentFunction<OpenAIParams, Record<string, any> | string, OpenAIInputs, OpenAIConfig> = async ({\n  filterParams,\n  params,\n  namedInputs,\n  config,\n}) => {\n  const { verbose, system, images, temperature, tools, tool_choice, max_tokens, prompt, messages, response_format } = {\n    ...params,\n    ...namedInputs,\n  };\n\n  const { apiKey, stream, baseURL } = {\n    ...params,\n    ...(config || {}),\n  };\n\n  const userPrompt = getMergeValue(namedInputs, params, \"mergeablePrompts\", prompt);\n  const systemPrompt = getMergeValue(namedInputs, params, \"mergeableSystem\", system);\n\n  const messagesCopy = getMessages<OpenAI.ChatCompletionMessageParam>(systemPrompt, messages);\n\n  if (!apiKey) {\n    throw new Error(\"OPENAI_API_KEY key is not set in params. params: {apiKey: 'sk-xxx'}\");\n  }\n\n  if (userPrompt) {\n    messagesCopy.push({\n      role: \"user\",\n      content: userPrompt,\n    });\n  }\n  if (images) {\n    const image_url =\n      params.model === \"gpt-4-vision-preview\"\n        ? images[0]\n        : {\n            url: images[0],\n            detail: \"high\",\n          };\n    messagesCopy.push({\n      role: \"user\",\n      content: [\n        {\n          type: \"image_url\",\n          image_url,\n        } as OpenAI.ChatCompletionContentPart,\n      ],\n    });\n  }\n\n  if (verbose) {\n    console.log(messagesCopy);\n  }\n\n  const chatParams = {\n    model: params.model || \"gpt-4o\",\n    messages: messagesCopy as unknown as OpenAI.ChatCompletionMessageParam[],\n    tools,\n    tool_choice,\n    max_tokens,\n    temperature: temperature ?? 0.7,\n    stream: !!stream,\n    response_format,\n  };\n\n  const urlPrefix = baseURL ?? \"https://api.openai.com/v1\";\n  const response = await fetch(urlPrefix + \"/chat/completions\", {\n    method: \"POST\",\n    headers: {\n      \"Content-Type\": \"application/json\",\n      Authorization: `Bearer ${apiKey}`,\n    },\n    body: JSON.stringify(chatParams),\n  });\n\n  if (!stream) {\n    if (response.status === 200) {\n      const result = await response.json();\n      return convertOpenAIChatCompletion(result, messagesCopy);\n    }\n    throw new Error(\"OPENAI API Error\");\n  }\n\n  // streaming\n  const reader = response.body?.getReader();\n\n  if (response.status !== 200 || !reader) {\n    throw new Error(\"Request failed\");\n  }\n\n  const decoder = new TextDecoder(\"utf-8\");\n  let done = false;\n  const buffer = [];\n  let text_buffer = \"\";\n  while (!done) {\n    const { done: readDone, value } = await reader.read();\n    if (readDone) {\n      done = readDone;\n      reader.releaseLock();\n    } else {\n      const text = decoder.decode(value, { stream: true });\n      text_buffer = text + text_buffer;\n      const lines = text_buffer.split(/\\n+/);\n      const next_buff = [];\n      for (const line of lines) {\n        try {\n          const json_text = line.replace(/^data:\\s*/, \"\");\n          if (json_text === \"[DONE]\") {\n            break;\n          } else if (json_text) {\n            const data = JSON.parse(json_text);\n            const token = data.choices[0].delta.content;\n            if (token) {\n              buffer.push(token);\n              if (filterParams && filterParams.streamTokenCallback && token) {\n                filterParams.streamTokenCallback(token);\n              }\n            }\n          }\n        } catch (__error) {\n          next_buff.push(line);\n        }\n      }\n      text_buffer = next_buff.join(\"\\n\");\n    }\n  }\n  return convertOpenAIChatCompletion(\n    {\n      choices: [\n        {\n          message: {\n            role: \"assistant\",\n            content: buffer.join(\"\"),\n            refusal: \"\",\n          },\n        },\n      ],\n    } as any,\n    messagesCopy,\n  );\n};\n\nconst input_sample = \"this is response result\";\nconst result_sample = {\n  object: \"chat.completion\",\n  id: \"chatcmpl-9N7HxXYbwjmdbdiQE94MHoVluQhyt\",\n  choices: [\n    {\n      message: {\n        role: \"assistant\",\n        content: input_sample,\n      },\n      finish_reason: \"stop\",\n      index: 0,\n      logprobs: null,\n    },\n  ],\n  created: 1715296589,\n  model: \"gpt-3.5-turbo-0125\",\n};\n\nexport const openAIMockAgent: AgentFunction<\n  {\n    model?: string;\n    query?: string;\n    system?: string;\n    verbose?: boolean;\n    temperature?: number;\n  },\n  Record<string, any> | string,\n  string | Array<any>\n> = async ({ filterParams }) => {\n  for await (const token of input_sample.split(\"\")) {\n    if (filterParams && filterParams.streamTokenCallback && token) {\n      await sleep(100);\n      filterParams.streamTokenCallback(token);\n    }\n  }\n\n  return result_sample;\n};\nconst openAIFetchAgentInfo: AgentFunctionInfo = {\n  name: \"openAIFetchAgent\",\n  agent: openAIFetchAgent,\n  mock: openAIMockAgent,\n  inputs: {\n    type: \"object\",\n    properties: {\n      model: { type: \"string\" },\n      system: { type: \"string\" },\n      tools: { type: \"object\" },\n      tool_choice: {\n        anyOf: [{ type: \"array\" }, { type: \"object\" }],\n      },\n      max_tokens: { type: \"number\" },\n      verbose: { type: \"boolean\" },\n      temperature: { type: \"number\" },\n      baseURL: { type: \"string\" },\n      apiKey: {\n        anyOf: [{ type: \"string\" }, { type: \"object\" }],\n      },\n      stream: { type: \"boolean\" },\n      prompt: {\n        type: \"string\",\n        description: \"query string\",\n      },\n      messages: {\n        anyOf: [{ type: \"string\" }, { type: \"object\" }, { type: \"array\" }],\n        description: \"chat messages\",\n      },\n    },\n  },\n  output: {\n    type: \"object\",\n    properties: {\n      id: {\n        type: \"string\",\n      },\n      object: {\n        type: \"string\",\n      },\n      created: {\n        type: \"integer\",\n      },\n      model: {\n        type: \"string\",\n      },\n      choices: {\n        type: \"array\",\n        items: [\n          {\n            type: \"object\",\n            properties: {\n              index: {\n                type: \"integer\",\n              },\n              message: {\n                type: \"array\",\n                items: [\n                  {\n                    type: \"object\",\n                    properties: {\n                      content: {\n                        type: \"string\",\n                      },\n                      role: {\n                        type: \"string\",\n                      },\n                    },\n                    required: [\"content\", \"role\"],\n                  },\n                ],\n              },\n            },\n            required: [\"index\", \"message\", \"logprobs\", \"finish_reason\"],\n          },\n        ],\n      },\n      usage: {\n        type: \"object\",\n        properties: {\n          prompt_tokens: {\n            type: \"integer\",\n          },\n          completion_tokens: {\n            type: \"integer\",\n          },\n          total_tokens: {\n            type: \"integer\",\n          },\n        },\n        required: [\"prompt_tokens\", \"completion_tokens\", \"total_tokens\"],\n      },\n      text: {\n        type: \"string\",\n      },\n      tool: {\n        arguments: {\n          type: \"object\",\n        },\n        name: {\n          type: \"string\",\n        },\n      },\n      message: {\n        type: \"object\",\n        properties: {\n          content: {\n            type: \"string\",\n          },\n          role: {\n            type: \"string\",\n          },\n        },\n        required: [\"content\", \"role\"],\n      },\n    },\n    required: [\"id\", \"object\", \"created\", \"model\", \"choices\", \"usage\"],\n  },\n  params: {\n    type: \"object\",\n    properties: {\n      model: { type: \"string\" },\n      system: { type: \"string\" },\n      tools: { type: \"object\" },\n      tool_choice: { anyOf: [{ type: \"array\" }, { type: \"object\" }] },\n      max_tokens: { type: \"number\" },\n      verbose: { type: \"boolean\" },\n      temperature: { type: \"number\" },\n      baseURL: { type: \"string\" },\n      apiKey: { anyOf: [{ type: \"string\" }, { type: \"object\" }] },\n      stream: { type: \"boolean\" },\n      prompt: { type: \"string\", description: \"query string\" },\n      messages: { anyOf: [{ type: \"string\" }, { type: \"object\" }, { type: \"array\" }], description: \"chat messages\" },\n    },\n  },\n  outputFormat: {\n    llmResponse: {\n      key: \"choices.$0.message.content\",\n      type: \"string\",\n    },\n  },\n  samples: [\n    {\n      inputs: { prompt: input_sample },\n      params: {},\n      result: result_sample,\n    },\n  ],\n  description: \"OpenAI Fetch Agent\",\n  category: [\"llm\"],\n  author: \"Receptron team\",\n  repository: \"https://github.com/receptron/graphai\",\n  license: \"MIT\",\n  stream: true,\n  npms: [\"openai\"],\n};\n\nexport default openAIFetchAgentInfo;\n"],"names":["getMergeValue","getMessages","sleep"],"mappings":"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"}